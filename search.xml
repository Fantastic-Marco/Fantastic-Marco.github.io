<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[工厂模式]]></title>
    <url>%2F2019%2F02%2F14%2F%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[工厂模式 使命工厂模式的出现是为了解决接口选择问题，当我们明确不同条件下创建不同实例时，可以选择工厂模式来创建实例。 优点 1、调用者想创建对象只需知道其名称即可，不用关心创建细节 2、拓展性高 3、屏蔽创建实现，调用者只需关心接口 缺点 每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。 ###造车工厂 下面我们将通过一个实例来体验一下工厂模式的应用，需求背景是一个卖车中介知道了一个超级工厂，这个工厂能创建各种车型，只需要中介把车型告诉给工厂就能造出来。我们将通过代码来实现这一场景 卖车中介public class Client { public static void main(String[] args) { VehicleFactory factory = new VehicleFactory(); IVehicle benz = factory.product(&quot;BENZ&quot;); benz.whistle(); benz.drive(); System.out.println(&quot;-------------------------------&quot;); IVehicle audi = factory.product(&quot;AUDI&quot;); audi.whistle(); audi.drive(); System.out.println(&quot;-------------------------------&quot;); IVehicle bmw = factory.product(&quot;BMW&quot;); bmw.whistle(); bmw.drive(); } } 汽车接口public interface IVehicle { /** * 鸣笛 */ void whistle(); /** * 行驶 */ void drive(); } 奥迪汽车public class Audi implements IVehicle { @Override public void whistle() { System.out.println(&quot;奥迪在鸣笛......&quot;); } @Override public void drive() { System.out.println(&quot;奥迪在行驶......&quot;); } } 宝马汽车public class BMW implements IVehicle { @Override public void whistle() { System.out.println(&quot;宝马在鸣笛......&quot;); } @Override public void drive() { System.out.println(&quot;宝马在行驶......&quot;); } } 奔驰汽车public class Benz implements IVehicle { @Override public void whistle() { System.out.println(&quot;奔驰在鸣笛......&quot;); } @Override public void drive() { System.out.println(&quot;奔驰在行驶......&quot;); } } 汽车超级工厂public class VehicleFactory { public IVehicle product(String name){ IVehicle vehicle = null; if (&quot;BENZ&quot;.equals(name)){ vehicle = new Benz(); }else if(&quot;BMW&quot;.equals(name)){ vehicle = new BMW(); }else if (&quot;AUDI&quot;.equals(name)){ vehicle = new Audi(); } return vehicle; } } 经验之谈 工厂作为一种创建类模式，在需要生成复杂对象的地方都可以使用，但是如果是简单能用new可以完成创建对象就不必用上工厂模式了，这会增加系统维护的复杂度。 工厂模式其实和策略模式很相似，工厂模式着重于创建的过程，只要把创建的对象交给调用者就完成使命了，而策略模式是要选择不同的策略，并且调用具体的接口方法。可以说工厂方法实现到下面就已经达到效果了 public static void main(String[] args) { VehicleFactory factory = new VehicleFactory(); IVehicle benz = factory.product(&quot;BENZ&quot;); IVehicle audi = factory.product(&quot;AUDI&quot;); IVehicle bmw = factory.product(&quot;BMW&quot;); }]]></content>
      <categories>
        <category>设计模式</category>
        <category>创建型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>创建型模式</tag>
        <tag>工厂模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[单例模式]]></title>
    <url>%2F2018%2F02%2F01%2F%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[单例模式 单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。 这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。 使命单例模式的出现是为了解决全局使用的类频繁地被创建，浪费系统资源 优点 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例。 2、避免对资源的多重占用（比如写文件操作）。 缺点 没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。 懒汉式，线程不安全是否 Lazy 初始化：是 是否多线程安全：否 实现难度：易 描述：这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，所以严格意义上它并不算单例模式。这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。 public class Singleton { private static Singleton instance; private Singleton (){} public static Singleton getInstance() { if (instance == null) { instance = new Singleton(); } return instance; } } 懒汉式，线程安全是否 Lazy 初始化：是 是否多线程安全：是 实现难度：易 描述：这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。 优点：第一次调用才初始化，避免内存浪费。 缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。 getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。 public class Singleton { private static Singleton instance; private Singleton (){} public static synchronized Singleton getInstance() { if (instance == null) { instance = new Singleton(); } return instance; } } 饿汉式是否 Lazy 初始化：否 是否多线程安全：是 实现难度：易 描述：这种方式比较常用，但容易产生垃圾对象。 优点：没有加锁，执行效率会提高。 缺点：类加载时就初始化，浪费内存。它基于 classloader 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazy loading 的效果。 public class Singleton { private static Singleton instance = new Singleton(); private Singleton (){} public static Singleton getInstance() { return instance; } } 双检锁/双重校验锁（DCL，即 double-checked locking）JDK 版本：JDK1.5 起 是否 Lazy 初始化：是 是否多线程安全：是 实现难度：较复杂 描述：这种方式采用双锁机制，安全且在多线程情况下能保持高性能。getInstance() 的性能对应用程序很关键。 public class Singleton { private volatile static Singleton singleton; private Singleton (){} public static Singleton getSingleton() { if (singleton == null) { synchronized (Singleton.class) { if (singleton == null) { singleton = new Singleton(); } } } return singleton; } } 登记式/静态内部类是否 Lazy 初始化：是 是否多线程安全：是 实现难度：一般 描述：这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。这种方式同样利用了 classloader 机制来保证初始化 instance 时只有一个线程，它跟第 3 种方式不同的是：第 3 种方式只要 Singleton 类被装载了，那么 instance 就会被实例化（没有达到 lazy loading 效果），而这种方式是 Singleton 类被装载了，instance 不一定被初始化。因为 SingletonHolder 类没有被主动使用，只有通过显式调用 getInstance 方法时，才会显式装载 SingletonHolder 类，从而实例化 instance。想象一下，如果实例化 instance 很消耗资源，所以想让它延迟加载，另外一方面，又不希望在 Singleton 类加载时就实例化，因为不能确保 Singleton 类还可能在其他的地方被主动使用从而被加载，那么这个时候实例化 instance 显然是不合适的。这个时候，这种方式相比第 3 种方式就显得很合理。 public class Singleton { private static class SingletonHolder { private static final Singleton INSTANCE = new Singleton(); } private Singleton (){} public static final Singleton getInstance() { return SingletonHolder.INSTANCE; } } 枚举JDK 版本：JDK1.5 起 是否 Lazy 初始化：否 是否多线程安全：是 实现难度：易 描述：这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。这种方式是 Effective Java 作者 Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入 enum 特性，用这种方式写不免让人感觉生疏，在实际工作中，也很少用。不能通过 reflection attack 来调用私有构造方法。 public enum Singleton { INSTANCE; public void whateverMethod() { } } 经验之谈 一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。]]></content>
      <categories>
        <category>设计模式</category>
        <category>创建型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设计模式-前言]]></title>
    <url>%2F2018%2F01%2F29%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%89%8D%E8%A8%80%2F</url>
    <content type="text"><![CDATA[设计模式 何为设计模式？设计模式是怎么来的？如果你曾被代码腐朽的味道所毒到，而你又不想同样的事情发生在接手你工作的人身上时，那你应该要开始了解设计模式了，设计模式简单来说是一套开发经验，代码设计经验，是由软件界的先辈们（Erich Gamma，Richard Helm，Ralph Johnson，John Vlissides）总结出来的。这是一套可以反复使用的经验，它可以提高代码的可重用性，可维护性，并且可以解决一系列复杂的问题。 设计模式分门别类1 创建型模式 这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。 工厂模式（Factory Pattern） 抽象工厂模式（Abstract Factory Pattern） 单例模式（Singleton Pattern） 建造者模式（Builder Pattern） 原型模式（Prototype Pattern） 2 结构型模式 这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。 适配器模式（Adapter Pattern） 桥接模式（Bridge Pattern） 过滤器模式（Filter、Criteria Pattern） 组合模式（Composite Pattern） 装饰器模式（Decorator Pattern） 外观模式（Facade Pattern） 享元模式（Flyweight Pattern） 代理模式（Proxy Pattern） 3 行为型模式 这些设计模式特别关注对象之间的通信。 责任链模式（Chain of Responsibility Pattern） 命令模式（Command Pattern） 解释器模式（Interpreter Pattern） 迭代器模式（Iterator Pattern） 中介者模式（Mediator Pattern） 备忘录模式（Memento Pattern） 观察者模式（Observer Pattern） 状态模式（State Pattern） 空对象模式（Null Object Pattern） 策略模式（Strategy Pattern） 模板模式（Template Pattern） 访问者模式（Visitor Pattern） 4 J2EE 模式 这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。 MVC 模式（MVC Pattern） 业务代表模式（Business Delegate Pattern） 组合实体模式（Composite Entity Pattern） 数据访问对象模式（Data Access Object Pattern） 前端控制器模式（Front Controller Pattern） 拦截过滤器模式（Intercepting Filter Pattern） 服务定位器模式（Service Locator Pattern） 传输对象模式（Transfer Object Pattern） 设计模式原则1、开闭原则（Open Close Principle） 开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。 2、里氏代换原则（Liskov Substitution Principle） 里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。 3、依赖倒转原则（Dependence Inversion Principle） 这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。 4、接口隔离原则（Interface Segregation Principle） 这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。 5、迪米特法则，又称最少知道原则（Demeter Principle） 最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。 6、合成复用原则（Composite Reuse Principle） 合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。 7、单一职责原则（Single Responsibility Principle） 降低类的复杂度，尽可能简化类的职责，有且只有一个原因引起类的变更]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈 Spring Cloud]]></title>
    <url>%2F2017%2F01%2F28%2F%E6%B5%85%E8%B0%88-Spring-Cloud%2F</url>
    <content type="text"><![CDATA[什么是Spring Cloud？要知道什么是Spring Cloud之前，必须知道什么是微服务；简单来说，微服务是一种设计风格，它的主旨是将原本独立的系统拆分成不同的细小的服务，这些细小的服务独自运行，各服务之间通过基于Http Restful API 进行通信协作。而Spring Cloud 则是这种设计风格的实现，Spring Cloud提供了许多灵活简便的组件来让开发者简单快速地实现微服务。 Spring Cloud能为我们做什么？Spring Cloud是一个基于Spring Boot实现的微服务架构开发工具。它为微服务架构中涉及的配置管理，服务治理，断路器，智能路由器，微代理，控制总线，全局锁，决策竞选，分布式会话和集群状态管理等操作提供了一种简单的开发方式。 学习Spring Cloud该如何下手学习Spring Cloud的前提是你已经熟悉SpringBoot；SpringBoot会贯穿整个Spring Cloud开发，所以这是必不可少的。在此前提下，可以到Spring Cloud 中文网 大致了解Spring Cloud家族的各个成员。下面将会简单介绍各成员以及其作用 Spring Cloud Config 配置管理工具，支持Git存储配置内容，可以使用它实现应用配置的外部化存储，并支持客户端配置信息刷新，加密/解密配置内容等。 Spring Cloud Netflix 核心组件，对多个Netflix OSS开源套件进行整合。 Eureka：服务治理组件，包含注册中心，服务注册与发现机制的实现。 Hystrix：容错管理组件，实现断路器模式，帮助服务依赖中出现的延迟和为故障提供强大的容错能力。 Ribbon：客户端负载均衡的服务调用组件。 Feign：基于Ribbon和Hystrix的声明式服务调用组件。 Zuul：网关组件，提供智能路由，访问过滤等功能。 Archaius：外部化配置组件。 Spring Cloud Bus 事件，消息总线，用于传播集群中的状态变化或者事件，以触发后续的处理，例如动态刷新配置等。 Spring Cloud Cluster 针对Zookeeper，Redis，Hazelcast，Consul的选举算法和通用状态模式的实现。 Spring Cloud Cloudfoundry 与Pivotal Cloudfoundry的整合支持 Spring Cloud Consul 服务发现与配置管理工具,封装了Consul操作，consul是一个服务发现与配置工具，与Docker容器可以无缝集成。 Spring Cloud Stream 通过Redis，Rabbit MQ或者Kafka实现消费微服务，可以通过简单的声明式模型来发送和接收消息 Spring Cloud AWS 用于简化整合Amazon Web Service的组件 Spring Cloud Security 安全工具包，提供在Zuul代理中对OAuth2可花旦请求的中继器 Spring Cloud Sleuth Spring Cloud 应用分布式跟踪实现，可以完美整合Zipkin Spring Cloud ZooKeeper 基于ZooKeeper的服务发现与配置管理组件]]></content>
      <categories>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
</search>
