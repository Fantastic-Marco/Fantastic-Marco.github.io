<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F01%2F28%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new "测试测试" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[command; exec /usr/bin/bash -c ; fi]]></title>
    <url>%2F2019%2F01%2F25%2Fcommand-exec-usr-bin-bash-c-fi%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[设计模式-前言]]></title>
    <url>%2F2018%2F01%2F29%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%89%8D%E8%A8%80%2F</url>
    <content type="text"><![CDATA[设计模式 何为设计模式？设计模式是怎么来的？如果你曾被代码腐朽的味道所毒到，而你又不想同样的事情发生在接手你工作的人身上时，那你应该要开始了解设计模式了，设计模式简单来说是一套开发经验，代码设计经验，是由软件界的先辈们（Erich Gamma，Richard Helm，Ralph Johnson，John Vlissides）总结出来的。这是一套可以反复使用的经验，它可以提高代码的可重用性，可维护性，并且可以解决一系列复杂的问题。 设计模式分门别类1 创建型模式 这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。 工厂模式（Factory Pattern） 抽象工厂模式（Abstract Factory Pattern） 单例模式（Singleton Pattern） 建造者模式（Builder Pattern） 原型模式（Prototype Pattern） 2 结构型模式 这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。 适配器模式（Adapter Pattern） 桥接模式（Bridge Pattern） 过滤器模式（Filter、Criteria Pattern） 组合模式（Composite Pattern） 装饰器模式（Decorator Pattern） 外观模式（Facade Pattern） 享元模式（Flyweight Pattern） 代理模式（Proxy Pattern） 3 行为型模式 这些设计模式特别关注对象之间的通信。 责任链模式（Chain of Responsibility Pattern） 命令模式（Command Pattern） 解释器模式（Interpreter Pattern） 迭代器模式（Iterator Pattern） 中介者模式（Mediator Pattern） 备忘录模式（Memento Pattern） 观察者模式（Observer Pattern） 状态模式（State Pattern） 空对象模式（Null Object Pattern） 策略模式（Strategy Pattern） 模板模式（Template Pattern） 访问者模式（Visitor Pattern） 4 J2EE 模式 这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。 MVC 模式（MVC Pattern） 业务代表模式（Business Delegate Pattern） 组合实体模式（Composite Entity Pattern） 数据访问对象模式（Data Access Object Pattern） 前端控制器模式（Front Controller Pattern） 拦截过滤器模式（Intercepting Filter Pattern） 服务定位器模式（Service Locator Pattern） 传输对象模式（Transfer Object Pattern） 设计模式原则1、开闭原则（Open Close Principle） 开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。 2、里氏代换原则（Liskov Substitution Principle） 里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。 3、依赖倒转原则（Dependence Inversion Principle） 这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。 4、接口隔离原则（Interface Segregation Principle） 这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。 5、迪米特法则，又称最少知道原则（Demeter Principle） 最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。 6、合成复用原则（Composite Reuse Principle） 合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。 7、单一职责原则（Single Responsibility Principle） 降低类的复杂度，尽可能简化类的职责，有且只有一个原因引起类的变更]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈 Spring Cloud]]></title>
    <url>%2F2017%2F01%2F28%2F%E6%B5%85%E8%B0%88-Spring-Cloud%2F</url>
    <content type="text"><![CDATA[什么是Spring Cloud？要知道什么是Spring Cloud之前，必须知道什么是微服务；简单来说，微服务是一种设计风格，它的主旨是将原本独立的系统拆分成不同的细小的服务，这些细小的服务独自运行，各服务之间通过基于Http Restful API 进行通信协作。而Spring Cloud 则是这种设计风格的实现，Spring Cloud提供了许多灵活简便的组件来让开发者简单快速地实现微服务。 Spring Cloud能为我们做什么？Spring Cloud是一个基于Spring Boot实现的微服务架构开发工具。它为微服务架构中涉及的配置管理，服务治理，断路器，智能路由器，微代理，控制总线，全局锁，决策竞选，分布式会话和集群状态管理等操作提供了一种简单的开发方式。 学习Spring Cloud该如何下手学习Spring Cloud的前提是你已经熟悉SpringBoot；SpringBoot会贯穿整个Spring Cloud开发，所以这是必不可少的。在此前提下，可以到Spring Cloud 中文网 大致了解Spring Cloud家族的各个成员。下面将会简单介绍各成员以及其作用 Spring Cloud Config 配置管理工具，支持Git存储配置内容，可以使用它实现应用配置的外部化存储，并支持客户端配置信息刷新，加密/解密配置内容等。 Spring Cloud Netflix 核心组件，对多个Netflix OSS开源套件进行整合。 Eureka：服务治理组件，包含注册中心，服务注册与发现机制的实现。 Hystrix：容错管理组件，实现断路器模式，帮助服务依赖中出现的延迟和为故障提供强大的容错能力。 Ribbon：客户端负载均衡的服务调用组件。 Feign：基于Ribbon和Hystrix的声明式服务调用组件。 Zuul：网关组件，提供智能路由，访问过滤等功能。 Archaius：外部化配置组件。 Spring Cloud Bus 事件，消息总线，用于传播集群中的状态变化或者事件，以触发后续的处理，例如动态刷新配置等。 Spring Cloud Cluster 针对Zookeeper，Redis，Hazelcast，Consul的选举算法和通用状态模式的实现。 Spring Cloud Cloudfoundry 与Pivotal Cloudfoundry的整合支持 Spring Cloud Consul 服务发现与配置管理工具,封装了Consul操作，consul是一个服务发现与配置工具，与Docker容器可以无缝集成。 Spring Cloud Stream 通过Redis，Rabbit MQ或者Kafka实现消费微服务，可以通过简单的声明式模型来发送和接收消息 Spring Cloud AWS 用于简化整合Amazon Web Service的组件 Spring Cloud Security 安全工具包，提供在Zuul代理中对OAuth2可花旦请求的中继器 Spring Cloud Sleuth Spring Cloud 应用分布式跟踪实现，可以完美整合Zipkin Spring Cloud ZooKeeper 基于ZooKeeper的服务发现与配置管理组件]]></content>
      <categories>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
</search>
